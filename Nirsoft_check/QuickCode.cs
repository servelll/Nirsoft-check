// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var v1 = V1.FromJson(jsonString);

using System;
using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace QuickType
{

    public partial class V1
    {
        [JsonProperty("kind")]
        public string Kind { get; set; }

        [JsonProperty("url")]
        public Url Url { get; set; }

        [JsonProperty("queries")]
        public Queries Queries { get; set; }

        [JsonProperty("context")]
        public Context Context { get; set; }

        [JsonProperty("searchInformation")]
        public SearchInformation SearchInformation { get; set; }

        [JsonProperty("items")]
        public List<Item> Items { get; set; }
    }

    public partial class Context
    {
        [JsonProperty("title")]
        public string Title { get; set; }
    }

    public partial class Item
    {
        [JsonProperty("kind")]
        public string Kind { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("htmlTitle")]
        public string HtmlTitle { get; set; }

        [JsonProperty("link")]
        public Uri Link { get; set; }

        [JsonProperty("displayLink")]
        public string DisplayLink { get; set; }

        [JsonProperty("snippet")]
        public string Snippet { get; set; }

        [JsonProperty("htmlSnippet")]
        public string HtmlSnippet { get; set; }

        [JsonProperty("cacheId")]
        public string CacheId { get; set; }

        [JsonProperty("formattedUrl")]
        public string FormattedUrl { get; set; }

        [JsonProperty("htmlFormattedUrl")]
        public string HtmlFormattedUrl { get; set; }

        [JsonProperty("pagemap", NullValueHandling = NullValueHandling.Ignore)]
        public Pagemap Pagemap { get; set; }

        [JsonProperty("mime", NullValueHandling = NullValueHandling.Ignore)]
        public string Mime { get; set; }

        [JsonProperty("fileFormat", NullValueHandling = NullValueHandling.Ignore)]
        public string FileFormat { get; set; }
    }

    public partial class Pagemap
    {
        [JsonProperty("metatags")]
        public List<Metatag> Metatags { get; set; }

        [JsonProperty("cse_thumbnail", NullValueHandling = NullValueHandling.Ignore)]
        public List<CseThumbnail> CseThumbnail { get; set; }

        [JsonProperty("cse_image", NullValueHandling = NullValueHandling.Ignore)]
        public List<CseImage> CseImage { get; set; }
    }

    public partial class CseImage
    {
        [JsonProperty("src")]
        public Uri Src { get; set; }
    }

    public partial class CseThumbnail
    {
        [JsonProperty("src")]
        public Uri Src { get; set; }

        [JsonProperty("width")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Width { get; set; }

        [JsonProperty("height")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Height { get; set; }
    }

    public partial class Metatag
    {
        [JsonProperty("og:type")]
        public string OgType { get; set; }

        [JsonProperty("og:site_name")]
        public string OgSiteName { get; set; }

        [JsonProperty("og:locale")]
        public string OgLocale { get; set; }

        [JsonProperty("og:url")]
        public Uri OgUrl { get; set; }

        [JsonProperty("og:image", NullValueHandling = NullValueHandling.Ignore)]
        public Uri OgImage { get; set; }

        [JsonProperty("og:image:width", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? OgImageWidth { get; set; }

        [JsonProperty("og:title", NullValueHandling = NullValueHandling.Ignore)]
        public string OgTitle { get; set; }

        [JsonProperty("og:image:height", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? OgImageHeight { get; set; }

        [JsonProperty("og:description", NullValueHandling = NullValueHandling.Ignore)]
        public string OgDescription { get; set; }
    }

    public partial class Queries
    {
        [JsonProperty("request")]
        public List<Request> Request { get; set; }
    }

    public partial class Request
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("totalResults")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TotalResults { get; set; }

        [JsonProperty("searchTerms")]
        public string SearchTerms { get; set; }

        [JsonProperty("count")]
        public long Count { get; set; }

        [JsonProperty("startIndex")]
        public long StartIndex { get; set; }

        [JsonProperty("inputEncoding")]
        public string InputEncoding { get; set; }

        [JsonProperty("outputEncoding")]
        public string OutputEncoding { get; set; }

        [JsonProperty("safe")]
        public string Safe { get; set; }

        [JsonProperty("cx")]
        public string Cx { get; set; }
    }

    public partial class SearchInformation
    {
        [JsonProperty("searchTime")]
        public double SearchTime { get; set; }

        [JsonProperty("formattedSearchTime")]
        public string FormattedSearchTime { get; set; }

        [JsonProperty("totalResults")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TotalResults { get; set; }

        [JsonProperty("formattedTotalResults")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long FormattedTotalResults { get; set; }
    }

    public partial class Url
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("template")]
        public string Template { get; set; }
    }

    public partial class V1
    {
        public static V1 FromJson(string json) => JsonConvert.DeserializeObject<V1>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this V1 self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
